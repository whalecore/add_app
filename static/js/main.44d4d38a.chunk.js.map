{"version":3,"sources":["utils/mask-email.ts","components/info-card/AddInfo.tsx","components/calc-card/CalcCard.tsx","components/steps-card/StepsCard.tsx","components/loadingModal/LoadingModal.tsx","components/results-card/ResultsCard.tsx","pages/operation-page/operation-page.tsx","components/entry-point/EntryPoint.tsx","components/header/Header.tsx","components/sign-in/Sign-in.tsx","App.tsx","store/resultsStore.ts","store/userStore.ts","index.tsx"],"names":["maskEmail","email","domainName","substr","indexOf","replace","repeat","length","AddInfo","props","className","currentUser","CalcCard","observer","useState","num","setNum","numTwo","setNumTwo","additionalNum","setAdditionalNum","lockForm","setLockForm","useEffect","clearAll","clearOff","form","formNumber","numFunc","FormControl","value","disabled","name","onChange","e","val","parseInt","target","Number","isNaN","Card","Body","Title","InputGroup","size","Button","onClick","resStore","clearNumbersArray","variant","id","addNumbers","console","log","numbers","DropdownButton","title","Dropdown","Item","StepsCard","equat","setEquat","equatItem","setEquatItem","Text","customFilterNumbers","join","autoClose","sortNumbersAsc","clearFilteredArray","sortNumbersDesc","greaterThan","lesserThan","LoadingModal","onShow","show","setShow","prgBar","setPrgBar","timer","setInterval","prevState","Math","min","timeout","setTimeout","clearInterval","clearTimeout","Modal","onHide","backdrop","keyboard","keyboardStatus","centered","ProgressBar","animated","now","ResultsCard","sum","sumNumbers","Table","width","striped","bordered","hover","map","number","style","color","OperationPage","index","setIndex","clear","setClear","Container","Row","Col","md","store","userData","Carousel","controls","indicators","activeIndex","Spinner","animation","EntryPoint","isLogged","to","Header","fluid","Navbar","bg","expand","Brand","marginLeft","as","Link","Toggle","Collapse","Nav","preventDefault","logOut","SignIn","password","setCurrentUser","emailError","setEmailError","Form","onSubmit","Group","controlId","Label","Control","RegExp","test","String","toLowerCase","placeholder","type","makeObservable","newNumber","this","reduce","acc","copyArrayToCustom","filter","a","sort","b","observable","action","bound","signin","user","signout","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.44d4d38a.chunk.js","sourcesContent":["// функция для маскировки доменного имени почты пользователя\r\nexport const maskEmail = (email: string): string => {\r\n  const domainName = email.substr(email.indexOf(\"@\") + 2).replace(/\\.\\w+/, \"\");\r\n  const maskedEmail = email.replace(domainName, \"*\".repeat(domainName.length));\r\n  return maskedEmail;\r\n};\r\n","// Заглушка для левой стороны экрана на странице с проведением сложения\r\nimport React from \"react\";\r\n\r\nimport { maskEmail } from \"../../utils/mask-email\";\r\n\r\ninterface AddProps {\r\n  currentUser: string;\r\n}\r\n\r\nconst AddInfo = (props: AddProps): JSX.Element => {\r\n\r\n  return (\r\n    <div>\r\n      <h3 className=\"display-6 mt-5\">\r\n        Привет, {maskEmail(props.currentUser)}!\r\n      </h3>\r\n      <p className=\"lead\">Здесь ты можешь сложить любые числа.</p>\r\n      <p>Воспользуйся полями в правой части экрана и нажми на кнопку \"Далее\"</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddInfo;\r\n","// Компонент для проведения расчетов\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport {\r\n  Card,\r\n  InputGroup,\r\n  Button,\r\n  FormControl,\r\n  DropdownButton,\r\n  Dropdown,\r\n} from \"react-bootstrap\";\r\n\r\nimport { resStore } from \"../../App\";\r\n\r\n// Интерфейс для получения пропсов из компонента OperationPage\r\ninterface CalcCardProps {\r\n  clearAll: boolean;\r\n  clearOff: Function;\r\n}\r\n\r\nconst CalcCard = observer((props: CalcCardProps) => {\r\n  // состояния для введения чисел\r\n  // по хорошему стоило сделать список, в который добавлялось бы по числу,\r\n  // однако я решил отложить это до момента, когда все карточки я отрефакторю\r\n  // в один компонент\r\n  const [num, setNum] = useState(0);\r\n  const [numTwo, setNumTwo] = useState(0);\r\n  const [additionalNum, setAdditionalNum] = useState(0);\r\n  // состояние для закрытия форм после введения данных\r\n  const [lockForm, setLockForm] = useState(false);\r\n\r\n  // Если из родительского компонента пропсом было передано значение true в clearAll\r\n  // то очищаем формы и разлочиваем их. После срабатывания хука возвращаем значение \r\n  // в исходное положение\r\n  useEffect(() => {\r\n    if (props.clearAll) {\r\n      setNum(0);\r\n      setNumTwo(0);\r\n      setAdditionalNum(0);\r\n      setLockForm(false);\r\n    }\r\n    return () => {\r\n      props.clearOff(false);\r\n    };\r\n    // eslint-disable-next-line\r\n  }, [props.clearAll]);\r\n\r\n  const form = (formNumber: number, numFunc: Function) => {\r\n    if (lockForm && !props.clearAll) {\r\n      return <FormControl value={formNumber} disabled />;\r\n    } else {\r\n      return (\r\n        <FormControl\r\n          value={formNumber}\r\n          name=\"addNumOne\"\r\n          onChange={(e) => {\r\n            const val = parseInt(e.target.value);\r\n\r\n            numFunc(Number.isNaN(val) ? 0 : val);\r\n          }}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className=\"w-100\">\r\n      <Card.Body>\r\n        <Card.Title>Введите числа по одному в поле ниже</Card.Title>\r\n        <Card.Body>\r\n          <InputGroup size=\"sm\" className=\"mt-1\">\r\n            {form(num, setNum)}\r\n            <span className=\"me-1 ms-1\">+</span>\r\n            {form(numTwo, setNumTwo)}\r\n          </InputGroup>\r\n\r\n          {lockForm && props.clearAll ? (\r\n            <Button\r\n              size=\"sm\"\r\n              className=\"mt-2\"\r\n              onClick={() => {\r\n                setNum(0);\r\n                setNumTwo(0);\r\n                setAdditionalNum(0);\r\n                setLockForm(false);\r\n                resStore.clearNumbersArray();\r\n              }}\r\n              variant=\"outline-secondary\"\r\n              id=\"button-addon1\"\r\n            >\r\n              Очистить поля\r\n            </Button>\r\n          ) : (\r\n            <Button\r\n              size=\"sm\"\r\n              className=\"mt-2\"\r\n              onClick={() => {\r\n                resStore.addNumbers(num);\r\n                resStore.addNumbers(numTwo);\r\n                console.log(resStore.numbers);\r\n                setLockForm(true);\r\n              }}\r\n              variant=\"outline-secondary\"\r\n              id=\"button-addon1\"\r\n            >\r\n              Добавить\r\n            </Button>\r\n          )}\r\n          {resStore.numbers.length > 1 ? (\r\n            <DropdownButton\r\n              title=\"Доп. число?\"\r\n              className=\"mt-2\"\r\n              size=\"sm\"\r\n              variant=\"outline-secondary\"\r\n            >\r\n              <InputGroup size=\"sm\">\r\n                <FormControl\r\n                  value={additionalNum}\r\n                  name=\"additionalNum\"\r\n                  onChange={(e) => {\r\n                    const val = parseInt(e.target.value);\r\n                    setAdditionalNum(Number.isNaN(val) ? 0 : val);\r\n                  }}\r\n                  className=\"mt-2 ms-1 me-1\"\r\n                />\r\n              </InputGroup>\r\n              <Dropdown.Item variant=\"outline-secondary\">\r\n                <Button\r\n                  onClick={() => {\r\n                    resStore.addNumbers(additionalNum);\r\n                    setAdditionalNum(0);\r\n                  }}\r\n                  className=\"mt-2\"\r\n                  variant=\"outline-secondary\"\r\n                  size=\"sm\"\r\n                >\r\n                  Добавить доп. число\r\n                </Button>\r\n              </Dropdown.Item>\r\n            </DropdownButton>\r\n          ) : (\r\n            <DropdownButton\r\n              title=\"Доп. число?\"\r\n              variant=\"outline-secondary\"\r\n              size=\"sm\"\r\n              className=\"mt-2\"\r\n              disabled\r\n            >\r\n              {/* Компонент не работает без детей внутри */}\r\n              {null}\r\n            </DropdownButton>\r\n          )}\r\n        </Card.Body>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n});\r\n\r\nexport default CalcCard;\r\n","import React, { useState } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport {\r\n  Card,\r\n  DropdownButton,\r\n  Dropdown,\r\n  Button,\r\n  InputGroup,\r\n  FormControl,\r\n} from \"react-bootstrap\";\r\n\r\nimport { resStore } from \"../../App\";\r\n\r\nconst StepsCard = observer((): JSX.Element => {\r\n  // Устанавливаем состояние для выбора варианта сравнения по маске пользователя\r\n  const [equat, setEquat] = useState(0);\r\n  // состояние для передачи числа, по которому будем сравнивать\r\n  const [equatItem, setEquatItem] = useState(0);\r\n\r\n  return (\r\n    <Card className=\"w-100\">\r\n      <Card.Title className=\"mt-2\">Подтвердите данные</Card.Title>\r\n      <Card.Body>\r\n        <Card.Text>\r\n          <span>Были введены следующие числа:</span>\r\n          <br />\r\n          <br />\r\n          {/* Если был вызван метод для сравнения по пользовательской маске - отдаем кастомный список customFiltersArray,\r\n          если он не был вызван или был вызван метод для сортировки по возрастанию/убыванию - то отдаем обычный список numbers */}\r\n          {resStore.customFilterNumbers.length > 0 ? (\r\n            <span className=\"lead\">\r\n              {resStore.customFilterNumbers.join(\", \")}\r\n            </span>\r\n          ) : (\r\n            <span className=\"lead\">{resStore.numbers.join(\", \")}</span>\r\n          )}\r\n          <br />\r\n          <br />\r\n          <span>\r\n            При нажатии на кнопку \"Далее\" будет произведено сложение введенных\r\n            вами чисел.\r\n          </span>\r\n          <br />\r\n          <br />\r\n          <span>\r\n            При нажатии на кнопку \"Назад\" введенные числа будут стерты и их\r\n            потребуется ввести заново\r\n          </span>\r\n        </Card.Text>\r\n        <DropdownButton\r\n          size=\"sm\"\r\n          className=\"mt-3\"\r\n          variant=\"outline-secondary\"\r\n          title=\"Сортировать\"\r\n          autoClose=\"outside\"\r\n        >\r\n          <Dropdown.Item>\r\n            <Button\r\n              onClick={() => {\r\n                // Очищаем кастомный список после сортировки стандартного списка, чтобы отдавать именно\r\n                // numbers для пользователя, а не скорректированный customFilteredNumbers\r\n                resStore.sortNumbersAsc();\r\n                resStore.clearFilteredArray();\r\n              }}\r\n              size=\"sm\"\r\n              variant=\"outline-secondary\"\r\n            >\r\n              По возрастанию\r\n            </Button>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <Button\r\n              onClick={() => {\r\n                // Очищаем кастомный список после сортировки стандартного списка, чтобы отдавать именно\r\n                // numbers для пользователя, а не скорректированный customFilteredNumbers\r\n                resStore.sortNumbersDesc();\r\n                resStore.clearFilteredArray();\r\n              }}\r\n              size=\"sm\"\r\n              variant=\"outline-secondary\"\r\n            >\r\n              По убыванию\r\n            </Button>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <DropdownButton\r\n              autoClose=\"outside\"\r\n              title=\"Больше или меньше выбранного числа\"\r\n              size=\"sm\"\r\n              variant=\"outline-secondary\"\r\n            >\r\n              <Dropdown.Item>\r\n                <InputGroup>\r\n                  <DropdownButton\r\n                    variant=\"outline-secondary\"\r\n                    size=\"sm\"\r\n                    title={equat ? \"Меньше, чем\" : \"Больше, чем\"}\r\n                  >\r\n                    <Dropdown.Item>\r\n                      <Button\r\n                        onClick={() => {\r\n                          setEquat(0);\r\n                        }}\r\n                        variant=\"outline-secondary\"\r\n                        size=\"sm\"\r\n                      >\r\n                        Больше, чем\r\n                      </Button>\r\n                    </Dropdown.Item>\r\n                    <Dropdown.Item>\r\n                      <Button\r\n                        onClick={() => {\r\n                          setEquat(1);\r\n                        }}\r\n                        variant=\"outline-secondary\"\r\n                        size=\"sm\"\r\n                      >\r\n                        Меньше, чем\r\n                      </Button>\r\n                    </Dropdown.Item>\r\n                  </DropdownButton>\r\n                  <FormControl\r\n                    onChange={(e) => {\r\n                      const val = parseInt(e.target.value);\r\n                      setEquatItem(Number.isNaN(val) ? 0 : val);\r\n                    }}\r\n                  />\r\n                  <Button\r\n                    onClick={() => {\r\n                      console.log(equat);\r\n                      console.log(equatItem);\r\n                      console.log(resStore.customFilterNumbers);\r\n                      if (equat === 0) {\r\n                        resStore.greaterThan(equatItem);\r\n                      }\r\n                      resStore.lesserThan(equatItem);\r\n                    }}\r\n                    size=\"sm\"\r\n                    variant=\"outline-secondary\"\r\n                  >\r\n                    Готово\r\n                  </Button>\r\n                </InputGroup>\r\n              </Dropdown.Item>\r\n            </DropdownButton>\r\n          </Dropdown.Item>\r\n        </DropdownButton>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n});\r\n\r\nexport default StepsCard;\r\n","// Заглушка для имитации проведения вычислений и запрета пользователю использования других кнопок\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport { Modal, ProgressBar } from \"react-bootstrap\";\r\n\r\ninterface LoadingModalProps {\r\n  keyboardStatus: boolean;\r\n  onShow: boolean;\r\n}\r\n\r\nconst LoadingModal = (props: LoadingModalProps): JSX.Element => {\r\n  const [show, setShow] = useState(props.onShow);\r\n  const [prgBar, setPrgBar] = useState(0);\r\n\r\n  // В течение 5.6 секунд отображаем данный экран, а также каждую секунду увеличиваем\r\n  // ProgressBar на 20%, после чего очищаем и таймаут и интервал\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setPrgBar((prevState) => {\r\n        if (prevState === 100) return 0;\r\n        return Math.min(prevState + 20);\r\n      });\r\n    }, 1000);\r\n    const timeout = setTimeout(() => {\r\n      setShow(false);\r\n    }, 5600);\r\n\r\n    return () => {\r\n      clearInterval(timer);\r\n      clearTimeout(timeout);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={() => setShow(false)}\r\n      backdrop=\"static\"\r\n      keyboard={props.keyboardStatus}\r\n      className=\"text-center\"\r\n      centered\r\n    >\r\n      <Modal.Title className=\"mt-2\">Производится расчет...</Modal.Title>\r\n      <Modal.Body>Пожалуйста, дождитесь окончания расчета.</Modal.Body>\r\n      <ProgressBar\r\n        className=\"mb-3 ms-3 me-3\"\r\n        animated\r\n        variant=\"success\"\r\n        now={prgBar}\r\n      />\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default LoadingModal;\r\n","// Компонент для отображения результатов\r\n\r\nimport React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport { Card, Table } from \"react-bootstrap\";\r\n\r\nimport { resStore } from \"../../App\";\r\n\r\nconst ResultsCard = observer((): JSX.Element => {\r\n  const sum = resStore.sumNumbers();\r\n\r\n  return (\r\n    <Card className=\"w-100\">\r\n      <Card.Title className=\"mt-2\">Результат вычисления</Card.Title>\r\n      <Card.Body>\r\n        <Table width=\"100px\" className=\"float-start\" striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th>Число</th>\r\n            </tr>\r\n          </thead>\r\n          {/* Выдаем результаты в виде двух таблиц, если в строчке число больше 10, то оно будет выделено зеленым цветом */}\r\n          <tbody>\r\n            {resStore.numbers.map((number) => {\r\n              return (\r\n                <tr key={number}>\r\n                  {number > 10 ? <td style={{ color: \"green\" }}>{number}</td> : <td>{number}</td>}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </Table>\r\n        <Table className=\"float-end\" striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th>Результат сложения</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {/* Если в строчке число больше 10, то оно будет выделено зеленым цветом */}\r\n            <tr>{sum > 10 ? <td style={{ color: \"green\" }}>{sum}</td> : <td>{sum}</td>}</tr>\r\n          </tbody>\r\n        </Table>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n});\r\n\r\nexport default ResultsCard;\r\n","// Основная страница для проведения вычисления\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Carousel,\r\n  Spinner,\r\n} from \"react-bootstrap\";\r\n\r\nimport AddInfo from \"../../components/info-card/AddInfo\";\r\n\r\nimport { store } from \"../../App\";\r\nimport { resStore } from \"../../App\";\r\nimport CalcCard from \"../../components/calc-card/CalcCard\";\r\nimport StepsCard from \"../../components/steps-card/StepsCard\";\r\nimport LoadingModal from \"../../components/loadingModal/LoadingModal\";\r\nimport ResultsCard from \"../../components/results-card/ResultsCard\";\r\n\r\nconst OperationPage = observer((): JSX.Element => {\r\n  // Состояние для управления текущим положением карусели в теле возвращаемого компонента\r\n  const [index, setIndex] = useState(0);\r\n  // Состояние для передачи в дочерний компонент CalcCard,\r\n  // если состояние истинно - удаляем введенные пользователем числа и очищаем список в состоянии\r\n  const [clear, setClear] = useState(false);\r\n\r\n  // Если состояние index равно 2 (3-й слайд карусели - \"расчет\") и компонент рендерится заново, \r\n  // то запускаем таймер на 5,6 секунд, чтобы Modal, который висит после перехода к расчету\r\n  // успел показать анимацию загрузки и не давал пользователю доступа к странице\r\n  useEffect(() => {\r\n    if (index === 2) {\r\n      setTimeout(() => {\r\n        setIndex(3);\r\n      }, 5600);\r\n    }\r\n  }, [index]);\r\n\r\n  // Определяем функционал и отображение кнопки \"Назад\" в зависимости от текущего слайда\r\n  const backButton = () => {\r\n    // Если мы на первом слайде, то кнопка назад недоступна\r\n    if (index === 0) {\r\n      return (\r\n        <Button className=\"me-3\" variant=\"outline-secondary\" disabled>\r\n          Назад\r\n        </Button>\r\n      );\r\n      // Если мы на последнем слайде, то кнопка назад становится кнопкой \"Заново\"\r\n      // и при нажатии очищает набор чисел во внешнем состоянии, а также устанавливает\r\n      // в локальном состоянии clear значение true, которое передается в CalcCard,\r\n      // в результате чего ранее введенные в формы числа сбрасываются\r\n    } else if (index === 3) {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            setIndex(0);\r\n            resStore.clearNumbersArray();\r\n            setClear(true);\r\n          }}\r\n          className=\"me-3\"\r\n          variant=\"outline-secondary\"\r\n        >\r\n          Заново\r\n        </Button>\r\n      );\r\n      // Во всех остальных случаях проверяем, не на первом ли мы слайде, чтобы не увести карусель в пустой экран\r\n      // и при нажатии на кнопку назад сбрасываем во внешнем состоянии массив с числами и очищаем в CalcCard \r\n      // формы для ввода чисел\r\n    } else {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            if (index === 0) {\r\n              return;\r\n            }\r\n            resStore.clearNumbersArray();\r\n            setClear(true);\r\n            setIndex(index - 1);\r\n          }}\r\n          className=\"me-3\"\r\n          variant=\"outline-secondary\"\r\n        >\r\n          Назад\r\n        </Button>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      {index === 2 ? (\r\n        <LoadingModal onShow={true} keyboardStatus={false} />\r\n      ) : null}\r\n      <Row className=\"d-xs-block vh-100\">\r\n        <Col\r\n          className=\"border-1 border rounded-3 text-center d-sm-none d-md-block\"\r\n          md=\"6\"\r\n        >\r\n          <AddInfo currentUser={store.userData.email} />\r\n        </Col>\r\n        <Col className=\"border-1 border rounded-3 text-center\" md=\"6\">\r\n          <Carousel\r\n            controls={false}\r\n            indicators={false}\r\n            activeIndex={index}\r\n            variant=\"dark\"\r\n            className=\"mt-3\"\r\n          >\r\n            <Carousel.Item>\r\n              <CalcCard clearOff={setClear} clearAll={clear} />\r\n            </Carousel.Item>\r\n            <Carousel.Item>\r\n              <StepsCard />\r\n            </Carousel.Item>\r\n            <Carousel.Item>\r\n              <Spinner\r\n                animation=\"border\"\r\n                className=\"mt-4 mb-3 ms-auto me-auto\"\r\n              />\r\n            </Carousel.Item>\r\n            <Carousel.Item>\r\n              <ResultsCard />\r\n            </Carousel.Item>\r\n          </Carousel>\r\n          <div className=\"ms-5 d-flex justify-content-center mt-3\">\r\n            {backButton()}\r\n            {/* Ограничиваем действие кнопки далее - она будет с пропсом disabled в случае, если во внешнее состояние\r\n                с массивом чисел не было передано ни одного значения, либо если мы на последнем слайде */}\r\n            {resStore.numbers.length === 0 || index === 3 ? (\r\n              <Button variant=\"outline-secondary\" className=\"me-5\" disabled>\r\n                Далее\r\n              </Button>\r\n            ) : (\r\n              <Button\r\n                onClick={() => {\r\n                  if (index === 3) {\r\n                    return;\r\n                  }\r\n                  setIndex(index + 1);\r\n                }}\r\n                className=\"me-5\"\r\n                variant=\"outline-secondary\"\r\n              >\r\n                Далее\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n});\r\n\r\nexport default OperationPage;\r\n","// Компонент для первой страницы приложения\r\nimport React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Button, Container } from \"react-bootstrap\";\r\n\r\nimport { store } from \"../../App\";\r\n\r\nconst EntryPoint = observer((): JSX.Element => {\r\n  return (\r\n    <Container className=\"py-5 mt-3 border text-dark rounded-3\">\r\n      <h1>Операция \"Сложение\"</h1>\r\n      <p className=\"col-md-8 fs-4 lead\">\r\n        Здесь вы сможете сложить любые числа. Одно, два или сколько вам\r\n        потребуется - сложение еще никогда не было таким простым!\r\n      </p>\r\n      {/* Если юзер залогинен, то кнопка будет вести на страницу сложения, если нет - на страницу входа */}\r\n      {store.userData.isLogged ? (\r\n        <Link to=\"/add\">\r\n          <Button size=\"lg\" variant=\"outline-secondary\">\r\n            К операции сложения\r\n          </Button>\r\n        </Link>\r\n      ) : (\r\n        <Link to=\"/signin\">\r\n          <Button size=\"lg\" variant=\"outline-secondary\">\r\n            Вход\r\n          </Button>\r\n        </Link>\r\n      )}\r\n    </Container>\r\n  );\r\n});\r\n\r\nexport default EntryPoint;\r\n","// Навигационная панель для приложения\r\nimport React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Navbar, Container, Nav } from \"react-bootstrap\";\r\nimport { User } from \"../../store/userStore\";\r\n\r\nimport { maskEmail } from \"../../utils/mask-email\";\r\n\r\ninterface HeaderProps {\r\n  currentUser: User;\r\n  logOut: Function;\r\n}\r\n\r\nconst Header = observer((props: HeaderProps): JSX.Element => {\r\n  return (\r\n    <Container fluid>\r\n      <Navbar bg=\"light\" expand=\"md\">\r\n        <Navbar.Brand style={{ marginLeft: \"10px\" }} as={Link} to=\"/\">\r\n          Операция \"Сложение\"\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"ms-auto\">\r\n            <Nav.Link as={Link} to=\"/add\">\r\n              Сложить\r\n            </Nav.Link>\r\n            {/* Если свойство isLogged во внешнем состоянии равно истине, то возвращаем кнопку \"выйти из аккаунта\" и его логин,\r\n                в ином случае отображаем кнопку \"войти\" */}\r\n            {props.currentUser.isLogged ? (\r\n              <Nav.Link\r\n                as={Link}\r\n                to=\"/\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  props.logOut(props.currentUser);\r\n                }}\r\n              >\r\n                Выйти из аккаунта{\" \"}\r\n                <Navbar.Text>{maskEmail(props.currentUser.email)}</Navbar.Text>\r\n              </Nav.Link>\r\n            ) : (\r\n              <Nav.Link as={Link} to=\"/signin\">\r\n                Войти\r\n              </Nav.Link>\r\n            )}\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </Container>\r\n  );\r\n});\r\n\r\nexport default Header;\r\n","// Компонент для входа в аккаунт. Т.к. не реализована регистрация, то войти можно при любом пароле\r\n\r\nimport React, { useState } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { Form, Button } from \"react-bootstrap\";\r\n\r\nimport { User } from \"../../store/userStore\";\r\n\r\n// Определеяем интерфейс для передачи пропсов в функцию \r\ninterface SignInProps {\r\n  onSubmit: Function;\r\n}\r\n\r\nconst SignIn = observer((props: SignInProps): JSX.Element => {\r\n  // Определяем юзера из полей в локальное состояние для дальнейшей передачи во внешнее состояние\r\n  const [currentUser, setCurrentUser] = useState<User>({\r\n    email: \"\",\r\n    password: \"\",\r\n    isLogged: false,\r\n  });\r\n  // Состояние для вывода текста ошибки при некорректном вводе email адреса\r\n  const [emailError, setEmailError] = useState(\"\");\r\n\r\n  const emailHandler = (e: any) => {\r\n    const { name, value } = e.target;\r\n    // Определяем маску для совпадения со стандартным email адресом в формате <user>@<example>.<com>\r\n    const regexp = new RegExp(\r\n      // eslint-disable-next-line\r\n      /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    );\r\n    // Если введенный email не совпадает с вышеописанной маской, то в состояние помещаем текст ошибки, который \r\n    // выведем внутри компонента\r\n    if (!regexp.test(String(value).toLowerCase())) {\r\n      setEmailError(\"Некорректный email\");\r\n    } else {\r\n      // В ином случае очистим текст ошибки и проставим данные в поля состояния\r\n      setEmailError(\"\")\r\n      setCurrentUser((prevState) => {\r\n        return {\r\n          ...prevState,\r\n          [name]: value,\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-md-flex justify-content-evenly\">\r\n      <Form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          // Используем полученный метод из пропсов для входа и сохранения информации во внешнем состоянии\r\n          props.onSubmit(currentUser);\r\n        }}\r\n        className=\"mt-5 mx-auto\"\r\n      >\r\n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n          <Form.Label>Ваш Email</Form.Label>\r\n          <Form.Control\r\n            onChange={emailHandler}\r\n            name=\"email\"\r\n            placeholder=\"Адрес Email\"\r\n          />\r\n          {/* Если ошибка есть, то выведем ее */}\r\n          {emailError ? (\r\n            <Form.Text style={{ color: \"red\" }}>{emailError}</Form.Text>\r\n          ) : null}\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n          <Form.Label>Пароль</Form.Label>\r\n          <Form.Control\r\n            onChange={(e) => {\r\n              const { name, value } = e.target;\r\n              setCurrentUser((prevState) => {\r\n                return {\r\n                  ...prevState,\r\n                  [name]: value,\r\n                };\r\n              });\r\n            }}\r\n            name=\"password\"\r\n            type=\"password\"\r\n            placeholder=\"Пароль\"\r\n          />\r\n        </Form.Group>\r\n        {/* Если в поля email и пароль было что-то введено, а также в переменной состояния ошибки ничего нет, то активируем кнопку */}\r\n        {currentUser.email.length > 0 &&\r\n        currentUser.password &&\r\n        emailError === \"\" ? (\r\n          <Button variant=\"success\" type=\"submit\">\r\n            Вход\r\n          </Button>\r\n        ) : (\r\n          <Button variant=\"secondary\" type=\"submit\" disabled>\r\n            Введите данные\r\n          </Button>\r\n        )}\r\n      </Form>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default SignIn;\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\nimport OperationPage from \"./pages/operation-page/operation-page\";\r\nimport EntryPoint from \"./components/entry-point/EntryPoint\";\r\nimport Header from \"./components/header/Header\";\r\nimport SignIn from \"./components/sign-in/Sign-in\";\r\n\r\n// Функциональные состояния и интерфейс для передачи пропсов в нижние элементы\r\n\r\nimport { User, userStore } from \"./store/userStore\";\r\n\r\nimport resultsStore from \"./store/resultsStore\";\r\n\r\n// Объявляем переменные из состояния и экспортируем их из файла для дальнейшего использования\r\n\r\nexport const resStore = resultsStore();\r\n\r\nexport const store = userStore();\r\n\r\nconst App = observer((): JSX.Element => {\r\n  // Обрабатываем вход в аккаунт через встроенный метод состояния юзера\r\n  const handleSubmit = (user: User) => {\r\n    store.signin(user);\r\n  };\r\n  // Обрабатываем выход из аккаунта через встроенный метод состояния юзера\r\n  const handleSignOut = (user: User) => {\r\n    store.signout(user);\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n      {/* Передаем метод для выхода в дочерний компонент, чтобы использовать его из него \r\n          и булеву переменную для динамического рендера кнопок \"Войти/Выйти\" */}\r\n      <Header logOut={handleSignOut} currentUser={store.userData} />\r\n      {/* Навигация */}\r\n      <Switch>\r\n        {/* Первая страница */}\r\n        <Route exact path=\"/\" component={EntryPoint} />\r\n        {/* Если бзер залогинен, повторно на страницу авторизации его не пустим, \r\n            вместо этого отправим на страницу сложения, в ином случае - отправляем\r\n            на страницу авторизации с передачей через пропсы метода для входа */}\r\n        <Route path=\"/signin\">\r\n          {store.userData.isLogged ? (\r\n            <Redirect to=\"/add\" />\r\n          ) : (\r\n            <SignIn onSubmit={handleSubmit} />\r\n          )}\r\n        </Route>\r\n        <Route path=\"/add\">\r\n            {/* на страницу сложения пускаем только в случае, если юзер залогинился */}\r\n          {store.userData.isLogged ? <OperationPage /> : <Redirect to=\"/\" />}\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n});\r\n\r\nexport default App;\r\n","import { action, makeObservable, observable } from \"mobx\";\r\n\r\n// Хранилище состояний для результатов вычислений\r\n// Два наблюдаемых массива - numbers и customFilterNumbers\r\n// В первый кладем числа введенные пользователем, во второй - отсортированный список по пользовательской маске\r\n\r\nexport default function resultsStore() {\r\n  return makeObservable(\r\n    {\r\n      numbers: [] as number[],\r\n      customFilterNumbers: [] as number[],\r\n      // поправить, чтобы принимал список из состояния внутри CalcCard\r\n      addNumbers(newNumber: number): number[] {\r\n        return (this.numbers = [...this.numbers, newNumber]);\r\n      },\r\n      sumNumbers() {\r\n        return this.numbers.reduce((acc, val) => {\r\n          return acc + val;\r\n        }, 0);\r\n      },\r\n      copyArrayToCustom() {\r\n        return (this.customFilterNumbers = this.numbers);\r\n      },\r\n      clearNumbersArray() {\r\n        return (this.numbers = []);\r\n      },\r\n      lesserThan(num: number) {\r\n        return (this.customFilterNumbers = this.numbers.filter((a) => a > num));\r\n      },\r\n      greaterThan(num: number) {\r\n        return (this.customFilterNumbers = this.numbers.filter((a) => a < num));\r\n      },\r\n      clearFilteredArray() {\r\n        return (this.customFilterNumbers = []);\r\n      },\r\n      sortNumbersAsc() {\r\n        return this.numbers.sort((a, b) => {\r\n          return a - b;\r\n        });\r\n      },\r\n      sortNumbersDesc() {\r\n        return this.numbers.sort((a, b) => {\r\n          return b - a;\r\n        });\r\n      },\r\n    },\r\n    {\r\n      numbers: observable,\r\n      customFilterNumbers: observable,\r\n      copyArrayToCustom: action.bound,\r\n      addNumbers: action.bound,\r\n      sumNumbers: action.bound,\r\n      sortNumbersAsc: action.bound,\r\n      sortNumbersDesc: action.bound,\r\n      clearNumbersArray: action.bound,\r\n      greaterThan: action.bound,\r\n      lesserThan: action.bound,\r\n      clearFilteredArray: action.bound,\r\n    }\r\n  );\r\n}\r\n","import { action, makeObservable, observable } from \"mobx\";\r\n\r\n// Типизируем абстрактного пользователя для передачи в аргументы методов и функций\r\nexport interface User {\r\n  email: string;\r\n  password: string;\r\n  isLogged: boolean;\r\n}\r\n\r\n// Хранилище состояний и методов для манипуляции юзером.\r\n// Всего имеет два метода (экшна) и одно наблюдаемое значение:\r\n// Наблюдаемое значение - userData, в нем в виде полей объекта храним пароль, почту \r\n// и в виде булева значения - в аккаунте он или нет.\r\n// Два стандартных метода - вход и выход, первый сохраняет почту, пароль и меняет поле isLogged в объекте userData на true.\r\n// Второй очищает объект и возвращает значение false полю isLogged.\r\n\r\nexport function userStore() {\r\n  return makeObservable(\r\n    {\r\n      userData: {\r\n        email: \"\",\r\n        password: \"\",\r\n        isLogged: false,\r\n      },\r\n      signin(user: User) {\r\n        this.userData = {\r\n          email: user.email,\r\n          password: user.password,\r\n          isLogged: true,\r\n        };\r\n      },\r\n      signout(user: User) {\r\n        this.userData = {\r\n          email: \"\",\r\n          password: \"\",\r\n          isLogged: false,\r\n        };\r\n      },\r\n    },\r\n    {\r\n      userData: observable,\r\n      signin: action.bound,\r\n      signout: action.bound,\r\n    }\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n"],"sourceRoot":""}